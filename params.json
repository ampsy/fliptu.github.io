{"name":"Fliptu API","tagline":"","body":"**https://fliptu.com back-end:**\r\n\r\nAccess token should be passed as an http parameter:\r\n* inside the url for GET requests (`GET https://fliptu.com/api/v1/overview?access_token=...`)\r\n* inside the url or the post body for POST requests (`POST https://api/v1/brands/:id/accounts/:network` with `access_token=...&account_id=...` post data)\r\n\r\nEndpoints:\r\n\r\n* `GET /api/v1/flipbooks/:id` - doesn't require access token\r\n* `GET /api/v1/flipbooks/:id/flips` - doesn't require access token\r\n* `GET /api/v1/flips/:id` - doesn't require access token\r\n* `GET /api/v1/flips/:id/comments` - doesn't require access token\r\n* `POST /api/v1/contact_form` - doesn't require access token, accepts name, email, text arguments, sends a message to the staff members (for custom plan requests)\r\n* `POST /api/v1/cards` - doesn't require acces token, accepts params[:card]: a hash with number, name, expiration_month, expiration_year, security_code values, returns a uniq card token in an id field: `{ id: '...' }`\r\n* `GET /api/v1/plans` - doesn't require access token, returns a list of all plans\r\n* `GET /api/v1/overview` - requires access token, lists all brands user has access to:\r\n```\r\n[{ id: ...,\r\n   name: ...,\r\n   personal: ...,\r\n   flipbooks: [{ id: ...,\r\n                 name: ...,\r\n                 social_page: ... }, ...],\r\n   social_networks: [{ name: ...,\r\n                       account_id: ... }]}, ... ]\r\n```\r\n* `POST /api/v1/brands/:id/accounts/:network` - requires access token, accepts account_id (unique code returned by Fliptu.social call), connects the account to the brand\r\n* `DELETE /api/v1/brands/:id/accounts/:network` - requires access token, disconnects specified social network account from the brand\r\n* `GET /api/v1/brands/:id/subscription` - requires access token, returns the subscription for the brand:\r\n```\r\n{ plan_id: ..,\r\n  card_number: .. /* the last 4 digits */,\r\n  feeds_used: ...,\r\n  feeds_extra: ... /* the number of extra feeds added in the admin */,\r\n  feeds_limit: ...,\r\n  card_url: \"/api/v1/cards\",\r\n  url: \"/api/v1/brands/:id/subscription\",\r\n  contact_form_url: \"/api/v1/contact_form\" }\r\n```\r\n* `PUT /api/v1/brands/:id/subscription` - requires access token, accepts plan_id, card (a token from the above), promo (promo code), returns a subscription object (same as above)\r\n* `DELETE /api/v1/connect` - requires access token, removes the access token\r\n* `POST /api/v1/brands/:id/flipbooks` - requires access token, accepts the following arguments (either as json or as regular post):\r\n```\r\n{\"data\":{\"kind\":\"crowdbook\", // allowed values are 'collection', 'campaign', 'social', 'crowdbook'\r\n         \"name\":\"test4\",\r\n         \"moderated\":false,\r\n         \"open\":false,\r\n         \"private\":false,\r\n         \"keyword\":\"\",\r\n         \"mention\":\"\",\r\n         \"username\":\"\",\r\n         \"import_from\":\"05/27/2015 10:35 am PDT\",\r\n         \"import_until\":\"05/28/2015 04:31 am PDT\",\r\n         \"parent_id\":\"\", // for crowdbook albums\r\n         \"featured_offer\":{\"name\":\"test\", // featured_offer can be null\r\n                           \"description\":\"test\",\r\n                           \"price\":\"99.99\",\r\n                           \"offer_url\":\"test\",\r\n                           \"expires_at\":\"05/27/2015 10:43 am PDT\"},\r\n          \"location\":\"\", // used for display only\r\n          \"radius\":\"0\",\r\n          \"address\":\"Champ de Mars, Eiffel Tower, 5 Avenue Anatole France, 75007 Paris, France\", // use only for geocoding if no geocoords specified\r\n          \"city\":\"Paris\", // used for display only\r\n          \"state\":\"ÃŽle-de-France\", // used for display only\r\n          \"zip\":\"75007\",  // used for display only\r\n          \"geocoords\":\"48.85837009999999,2.2944813000000295\"}}\r\n```\r\nreturns json representation of the flipbook's data (the same fields as above with addition of urls). Featured offers can also have an image attached - in this case only http multipart can be used, not json, the format is the same, image field should be `data[featured_offer][image]`\r\n* `PUT /api/v1/flipbooks/:id` - requires access token, updates the flipbook, arguments are the same as in flipbook creation\r\n* `DELETE /api/v1/flipbooks/:id` - requires access token, deletes the flipbook\r\n* all calls that don't require access token still use it if it's present (to determine if user has access to the flipbook or can like the flip for example)\r\n* `GET /api/v1/user` - requires access token, returns the current user's info:\r\n```\r\n{ id: ...,\r\n  login: ...,\r\n  avatar: ...,\r\n  small_avatar: ...,\r\n  has_password: ... // false if signed up using facebook }\r\n```\r\n\r\n**http://fliptu.com/assets/fliptu.js:**\r\n\r\n* `Fliptu.login(client_id, callback)` - connects fliptu account to the 3rd party app using the oauth-like flow - it opens up a fliptu login dialog with the ability to signup and login using email and facebook, recover password, etc and asks users to connect fliptu account with 3rd party app and then generates a new access token for the user/app pair and triggers the callback with that token. (for example wordpress integration app calls it like this `Fliptu.login('wordpress', function (token) { ... })` - the client_id is 'wix' and 'wordpress' for now) - and the token will be null if user cancels the connect request\r\n* `Fliptu.social(network, callback)` - adds a social account to fliptu app and returns one-time unique code in the callback, it doesn't connect the account to any brand or auth a user - it should be done using the `POST /api/v1/brands/:id/accounts/:network` endpoint from above (for example `Fliptu.social('twitter', function (accountId) { ... })`)\r\n* `Fliptu.importBrands(access_token, callback)` - asks to grant manage pages permission: opens a new window with 'import brands' button which triggers facebook login - if fliptu user identified by the `acces_token` already has a facebook account and currently logged in facebook user is not that account, then alert is displayed; if user doesn't grant manage_pages permission, alert is displayed; if everything is ok then `callback` is triggered with `{ success: true }`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}